/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import Controller.Register_Controller;
import Controller.SECP_Controller;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.Component;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.JOptionPane;
import org.apache.tuweni.crypto.SECP256K1.PublicKey;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import javax.swing.Icon;
import javax.swing.ImageIcon;

/**
 *
 * @author drago
 */
public class CreatePassword extends javax.swing.JFrame {
    String Username;
    String Password; 
    PublicKey p1;
    /**
     * Creates new form CreatePassword
     */
    ImageIcon greendotIcon;
    ImageIcon emptydotIcon; 
    
    public CreatePassword() {
        initComponents();        
        jProgressBar1.setForeground( Color.green);  
        DigitCheckBox5.setEnabled(false);
        DigitCheckBox5.setForeground(Color.black);
        LowerCheckBox4.setEnabled(false);
        LowerCheckBox4.setForeground(Color.black);
        SpecialCheckBox6.setEnabled(false);
        SpecialCheckBox6.setForeground(Color.black);
        UpperCheckBox.setEnabled(false);
        UpperCheckBox.setForeground(Color.black);
        progressionControll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollBar1 = new javax.swing.JScrollBar();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jSpinner1 = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        PasswordTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel3 = new javax.swing.JLabel();
        RepeatPasswordTextField = new javax.swing.JTextField();
        UpperCheckBox = new javax.swing.JCheckBox();
        LowerCheckBox4 = new javax.swing.JCheckBox();
        DigitCheckBox5 = new javax.swing.JCheckBox();
        SpecialCheckBox6 = new javax.swing.JCheckBox();
        CreateButtion = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        jToolBar1.setRollover(true);

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jFormattedTextField1.setText("jFormattedTextField1");

        jScrollPane2.setViewportView(jTree1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Create Master Password");
        setResizable(false);

        jPanel1.setToolTipText("");
        jPanel1.setAutoscrolls(true);
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setText("Enter Master Password:");

        PasswordTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasswordTextFieldActionPerformed(evt);
            }
        });
        PasswordTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PasswordTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                PasswordTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PasswordTextFieldKeyTyped(evt);
            }
        });

        jLabel2.setText("Confirm:");

        jLabel3.setText("Estimated Quality:");

        RepeatPasswordTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RepeatPasswordTextFieldActionPerformed(evt);
            }
        });

        UpperCheckBox.setText("Contain Uppercase letter (A-Z)");

        LowerCheckBox4.setText("Contain Lowercase letter (a-z)");
        LowerCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LowerCheckBox4ActionPerformed(evt);
            }
        });

        DigitCheckBox5.setText("Contain Digit (0-9)");
        DigitCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DigitCheckBox5ActionPerformed(evt);
            }
        });

        SpecialCheckBox6.setText("Contain Special Chracter  (!@#$%^&*() )");
        SpecialCheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SpecialCheckBox6ActionPerformed(evt);
            }
        });

        CreateButtion.setText("Create");
        CreateButtion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CreateButtionMousePressed(evt);
            }
        });

        CancelButton.setText("Cancel");
        CancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CancelButtonMouseClicked(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(153, 153, 153));
        jLabel4.setText("*Master password require minimum 8 characters");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 71, Short.MAX_VALUE))
                                    .addComponent(RepeatPasswordTextField)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(CreateButtion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(CancelButton)
                                .addGap(68, 68, 68))
                            .addComponent(SpecialCheckBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UpperCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DigitCheckBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LowerCheckBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(PasswordTextField)
                        .addGap(29, 29, 29))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PasswordTextField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RepeatPasswordTextField))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(UpperCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LowerCheckBox4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DigitCheckBox5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SpecialCheckBox6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CreateButtion)
                    .addComponent(CancelButton))
                .addGap(56, 56, 56))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RepeatPasswordTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RepeatPasswordTextFieldActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_RepeatPasswordTextFieldActionPerformed

    private void PasswordTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PasswordTextFieldKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_PasswordTextFieldKeyTyped

    private void PasswordTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PasswordTextFieldKeyPressed
        // TODO add your handling code here:
        
//        if(evt.getID()== KeyEvent.KEY_PRESSED) {
//            progressionControll();
//        }
    }//GEN-LAST:event_PasswordTextFieldKeyPressed

    private void PasswordTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasswordTextFieldActionPerformed

    }//GEN-LAST:event_PasswordTextFieldActionPerformed

    private void LowerCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LowerCheckBox4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LowerCheckBox4ActionPerformed

    private void DigitCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DigitCheckBox5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DigitCheckBox5ActionPerformed

    private void SpecialCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SpecialCheckBox6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SpecialCheckBox6ActionPerformed

    private void CreateButtionMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CreateButtionMousePressed
        // TODO add your handling code here:
        int response = 0;
        int x = progressionControll();
        
        if (PasswordTextField.getText().isBlank()){
            JOptionPane.showMessageDialog(rootPane, "Master Password is required");
        } else if (!(PasswordTextField.getText().contentEquals(RepeatPasswordTextField.getText()))){
            JOptionPane.showMessageDialog(rootPane, "Password do not match");
        } else if(PasswordTextField.getText().length()<8) { 
            JOptionPane.showMessageDialog(rootPane, "Minimum length of 8 master password length is required");
        } else if(x<=2){
            response = JOptionPane.showConfirmDialog(null, "Is advisable to create a stronger master password. Do you want to continue?", "Confirm",
            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.YES_OPTION){  Register(); }
        }  else { 
            Register () ; 
        }
        

    }//GEN-LAST:event_CreateButtionMousePressed
    
    private void Register () {
                    Register_Controller Rcon = new Register_Controller();
                    String message= Rcon.registerUser(Username,Password,PasswordTextField.getText());
                    JOptionPane.showMessageDialog(rootPane, message);
                    if("User registered successfully.".equals(message)){
                        new LoginPage().setVisible(true);
                        this.setVisible(false);
                    }
    }
    private void CancelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CancelButtonMouseClicked
        this.setVisible(false);
        RegisterPage RP= new RegisterPage();
        RP.setVisible(true);
        RP.filledintextfield(Username, Password);
    }//GEN-LAST:event_CancelButtonMouseClicked

    private void PasswordTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PasswordTextFieldKeyReleased
        // TODO add your handling code here:
        int x  = progressionControll();
    }//GEN-LAST:event_PasswordTextFieldKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreatePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreatePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreatePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreatePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelButton;
    private javax.swing.JButton CreateButtion;
    private javax.swing.JCheckBox DigitCheckBox5;
    private javax.swing.JCheckBox LowerCheckBox4;
    private javax.swing.JTextField PasswordTextField;
    private javax.swing.JTextField RepeatPasswordTextField;
    private javax.swing.JCheckBox SpecialCheckBox6;
    private javax.swing.JCheckBox UpperCheckBox;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

    private int progressionControll() {
        int Condition = 0;
        String input = PasswordTextField.getText();
        
        boolean containSpecialChar =  Pattern.compile ("[^a-zA-z.*\\d.*]").matcher(input).find();
        boolean containsLowercase = Pattern.compile("[a-z]").matcher(input).find();
        boolean containsUppercase = Pattern.compile("[A-Z]").matcher(input).find();
        boolean containDigit = Pattern.compile(".*\\d.*").matcher(input).find();
        
        if( containsUppercase==true){ UpperCheckBox.setSelected(true); Condition++;} else {UpperCheckBox.setSelected(false);}
        if( containsLowercase==true){ LowerCheckBox4.setSelected(true); Condition++;} else {LowerCheckBox4.setSelected(false);}
        if( containSpecialChar==true) { SpecialCheckBox6.setSelected(true); Condition++;} else {SpecialCheckBox6.setSelected(false);}
        if( containDigit==true){ DigitCheckBox5.setSelected(true); Condition++;} else {DigitCheckBox5.setSelected(false); }
        
        switch (Condition) {
            case 1 -> jProgressBar1.setValue(25);
            case 2 -> jProgressBar1.setValue(50);
            case 3 -> jProgressBar1.setValue(75);
            case 4 -> jProgressBar1.setValue(100);
            default -> jProgressBar1.setValue(0);
        }
        
        return Condition;
    }

    public void PassUserAndPass(String username, String password) {
        this.Username = username;
        this.Password = password;
    }
}
